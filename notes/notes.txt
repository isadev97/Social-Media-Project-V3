26th Aug, 2023 (Sat)

// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs


Table users {
  id integer [primary key]
  username varchar
  email varchar
  password varchar
  created_at timestamp
  updated_at timestamp
}

Table posts {
  id integer [primary key]
  user_id integer // author of the post
  caption varchar
  image varchar
  created_at timestamp
  updated_at timestamp
}

Table profile {
  id integer [primary key]
  user_id integer
  image varchar
  created_at timestamp
  updated_at timestamp
}

Table like_post {
  id integer [primary key]
  user_id integer // user who liked the post
  post_id integer // post on which like was made
  created_at timestamp
  updated_at timestamp
}

Ref: users.id  < posts.user_id // one to many
Ref: users.id - profile.user_id // one to one
Ref: users.id < like_post.user_id  // one to many
Ref: posts.id < like_post.post_id  // one to many


OneToOneField => 1:1
ManyToManyField => M:N
OneToMany or ManyToOne => Using Foreign Key

python3 manage.py dbshell to connect to db shell

media/post will have all the images of post
media/profile will have all the images of profile

*** Optional content for learning (we cover this again in system design) *** 
S3

S - Simple
S - Storage
S - Service


bucket1 => key (unique) => Image File 
bucket2
bucket3



aws s3 =>   profile bucket => username.file_ext (key)=> File
            post bucket => post_image_id.ext => File



regions => bucket = {

 	"key1" : <Image File>
 	"key2" : <Image File>

 }


bucket['key1'] => Image File
datetime.now() dd/mm/yyyy h:m:s
key = username-datetime.now()

put_object = uploading the image in a bucket with a particular file key
get_object = fetching the image in a bucket with a particular file key
delete_object


bucket 

key profile/username-image1.png => File

key profile/username-image.jpeg
key profile/username-image3.gif


profile/    username-image1.png 
            username-image.jpeg

settings object versioning => Turned off


html form => submit form => we send the data => call the decorator first => call the view